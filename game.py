# game.py
# -*- coding: utf-8 -*-

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from utils import get_user_data, set_user_data

# ======================================
#          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
# ======================================

# –ë—é–¥–∂–µ—Ç—ã –Ω–∞ –≤—ã–±–æ—Ä (‚ÇΩ)
BUDGETS = [50_000, 100_000, 200_000]

# –≠—Ç–∞–ø—ã —Å–±–æ—Ä–∫–∏, —Ü–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
STEPS = [
    {
        "component": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä",
        "options": [
            {"name": "Intel Core i3‚Äë12100F", "price": 8_000},
            {"name": "AMD Ryzen 5 5600X",  "price": 14_000},
            {"name": "Intel Core i7‚Äë12700K","price": 28_000},
        ],
        "optimal_game": 1,
        "optimal_work": 2,
        "analysis": {
            "game": (
                "–î–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–≥—Ä –≤–∞–∂–Ω–∞ –≤—ã—Å–æ–∫–∞—è —Ç–∞–∫—Ç–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –∏ —Ö–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ–¥–Ω–æ —è–¥—Ä–æ. "
                "Ryzen¬†5¬†5600X –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç 6 —è–¥–µ—Ä —Å –±–∞—Å–æ–º –¥–æ 4.6¬†–ì–ì—Ü, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—Ç–ª–∏—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏–≥—Ä."
            ),
            "work": (
                "–í —Ä–∞–±–æ—á–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö (—Ä–µ–Ω–¥–µ—Ä, –∫–æ–º–ø–∏–ª—è—Ü–∏—è, –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å) —Ü–µ–Ω—è—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —è–¥–µ—Ä –∏ –ø–æ—Ç–æ–∫–æ–≤. "
                "Core i7‚Äë12700K —Å 12 —Ä–µ–∞–ª—å–Ω—ã–º–∏ —è–¥—Ä–∞–º–∏ –∏ 20 –ø–æ—Ç–æ–∫–∞–º–∏ –ø–æ–∑–≤–æ–ª–∏—Ç –±—ã—Å—Ç—Ä–µ–µ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—è–∂—ë–ª—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏."
            )
        }
    },
    {
        "component": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
        "options": [
            {"name": "NVIDIA GTX 1650",    "price": 12_000},
            {"name": "AMD Radeon RX 6600", "price": 20_000},
            {"name": "NVIDIA RTX 3060 Ti", "price": 30_000},
        ],
        "optimal_game": 2,
        "optimal_work": 0,
        "analysis": {
            "game": (
                "–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –∫–∞–¥—Ä–æ–≤ –≤ –∏–≥—Ä–∞—Ö RTX¬†3060¬†Ti –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∑–∞–ø–∞—Å–æ–º CUDA‚Äë—è–¥–µ—Ä –∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é –ø–∞–º—è—Ç–∏. "
                "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ 1080p‚Äì1440p."
            ),
            "work": (
                "–ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –æ—Ñ–∏—Å–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ 3D‚Äë—É—Å–∫–æ—Ä–µ–Ω–∏—è, —Ç–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞. "
                "GTX¬†1650 –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤."
            )
        }
    },
    {
        "component": "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å (16¬†–ì–ë)",
        "options": [
            {"name": "2√ó8¬†GB DDR4‚Äë3200", "price": 6_000},
            {"name": "2√ó8¬†GB DDR4‚Äë3600", "price": 7_000},
            {"name": "2√ó8¬†GB DDR5‚Äë5200", "price": 10_000},
        ],
        "optimal_game": 1,
        "optimal_work": 2,
        "analysis": {
            "game": (
                "DDR4‚Äë3600 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –≤—ã—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π, —á—Ç–æ –¥–∞—ë—Ç –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏—Ä–æ—Å—Ç FPS."
            ),
            "work": (
                "–í —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á–∞—Ö (–≤–∏—Ä—Ç—É–∞–ª–∫–∏, –∫–æ–º–ø–∏–ª—è—Ü–∏–∏) DDR5‚Äë5200 –¥–∞—Å—Ç –ª—É—á—à–∏–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö, —É—Å–∫–æ—Ä—è—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."
            )
        }
    },
    {
        "component": "SSD‚Äë–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å",
        "options": [
            {"name": "512¬†GB NVMe PCIe¬†3.0", "price": 5_000},
            {"name": "1¬†TB NVMe PCIe¬†3.0",   "price": 8_000},
            {"name": "1¬†TB NVMe PCIe¬†4.0",   "price": 12_000},
        ],
        "optimal_game": 1,
        "optimal_work": 1,
        "analysis": {
            "game": (
                "1¬†TB PCIe¬†3.0 ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä—ë–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä, –ø–æ–∑–≤–æ–ª–∏—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—è–∂—ë–ª—ã—Ö —Ç–∞–π—Ç–ª–æ–≤ –±–µ–∑ —Ä–∞–∑–≥–æ–Ω–∫–∏ –±—é–¥–∂–µ—Ç–∞."
            ),
            "work": (
                "1¬†TB PCIe¬†3.0 –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ–±—ä—ë–º–æ–º –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –≥–¥–µ –≤–∞–∂–µ–Ω –æ–±—ä—ë–º —Ö—Ä–∞–Ω–µ–Ω–∏—è."
            )
        }
    },
    {
        "component": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è",
        "options": [
            {"name": "550¬†W Bronze", "price": 4_000},
            {"name": "650¬†W Gold",   "price": 6_000},
            {"name": "750¬†W Gold",   "price": 8_000},
        ],
        "optimal_game": 1,
        "optimal_work": 1,
        "analysis": {
            "game": (
                "650¬†W Gold ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –≤—ã—Å–æ–∫–∏–π –ö–ü–î –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å RTX¬†3060¬†Ti –∏ Ryzen¬†5."
            ),
            "work": (
                "650¬†W Gold –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π, –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞."
            )
        }
    },
    {
        "component": "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ",
        "options": [
            {"name": "–°—Ç–æ–∫–æ–≤—ã–π –∫—É–ª–µ—Ä","price": 1_000},
            {"name": "–ë–∞—à–µ–Ω–Ω—ã–π –∫—É–ª–µ—Ä","price": 3_000},
            {"name": "AIO 240¬†–º–º",    "price": 6_000},
        ],
        "optimal_game": 1,
        "optimal_work": 1,
        "analysis": {
            "game": (
                "–ë–∞—à–µ–Ω–Ω—ã–π –∫—É–ª–µ—Ä –æ–±–µ—Å–ø–µ—á–∏—Ç –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ç–∏—Ö—É—é —Ä–∞–±–æ—Ç—É, —á–µ–º —Å—Ç–æ–∫–æ–≤—ã–π, –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
            ),
            "work": (
                "–ë–∞—à–µ–Ω–Ω—ã–π –∫—É–ª–µ—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–∏—Ö–æ–π —Ä–∞–±–æ—Ç—ã, –∞ AIO –Ω–µ –¥–∞—Å—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –∑–∞ –¥–≤–æ–π–Ω—É—é —Ü–µ–Ω—É."
            )
        }
    },
]

TOTAL_STEPS = len(STEPS)

# ======================================
#        –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# ======================================
def build_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="game_home")]
    ])

def build_purpose_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="purpose_game"),
            InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="purpose_work"),
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="game_home")]
    ])

def build_budget_keyboard():
    buttons = [InlineKeyboardButton(f"{b//1000}¬†000¬†‚ÇΩ", callback_data=f"budget_{b}") for b in BUDGETS]
    return InlineKeyboardMarkup([buttons, [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="game_home")]])

def build_choice_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("1Ô∏è‚É£", callback_data="choice_0"),
            InlineKeyboardButton("2Ô∏è‚É£", callback_data="choice_1"),
            InlineKeyboardButton("3Ô∏è‚É£", callback_data="choice_2"),
        ],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="game_home")]
    ])

def build_restart_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="game_restart")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="game_home")]
    ])

# ======================================
#        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
# ======================================
async def send_stage_message(update: Update, text: str, header: str = "", reply_markup=None):
    styled_header = f"<b>{header}</b>\n\n" if header else ""
    await update.effective_message.reply_text(
        f"{styled_header}{text}",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

# ======================================
#            –õ–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
# ======================================
async def start_game_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = "üïπÔ∏è <b>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ü–ö</b>\n\n–î–ª—è –∫–∞–∫–∏—Ö –∑–∞–¥–∞—á —Å–æ–±–∏—Ä–∞–µ—Ç–µ —Å–∏—Å—Ç–µ–º—É?"
    await send_stage_message(update, text, reply_markup=build_purpose_keyboard())

async def handle_purpose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    purpose = query.data.split("_")[1]  # "game" –∏–ª–∏ "work"
    chat_id = query.message.chat_id
    set_user_data(chat_id, {
        "purpose": purpose,
        "budget": None,
        "remaining": None,
        "step": 0,
        "selections": []
    })
    text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç —Å–±–æ—Ä–∫–∏:"
    await send_stage_message(update, text, reply_markup=build_budget_keyboard())

async def handle_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    budget = int(query.data.split("_")[1])
    chat_id = query.message.chat_id
    state = get_user_data(chat_id)
    state["budget"] = budget
    state["remaining"] = budget
    set_user_data(chat_id, state)
    await show_next_step(update, context)

async def show_next_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    state = get_user_data(query.message.chat_id)
    idx = state["step"]
    if idx < TOTAL_STEPS:
        step = STEPS[idx]
        text = (
            f"–®–∞–≥ {idx+1} –∏–∑ {TOTAL_STEPS} ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ <b>{step['component']}</b>:\n\n"
            f"1) {step['options'][0]['name']} ‚Äî {step['options'][0]['price']}¬†‚ÇΩ\n"
            f"2) {step['options'][1]['name']} ‚Äî {step['options'][1]['price']}¬†‚ÇΩ\n"
            f"3) {step['options'][2]['name']} ‚Äî {step['options'][2]['price']}¬†‚ÇΩ\n\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: {state['remaining']}¬†‚ÇΩ"
        )
        await send_stage_message(update, text, header="–°–±–æ—Ä–∫–∞ –ü–ö", reply_markup=build_choice_keyboard())
    else:
        await show_result(update, context)

async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    chat_id = query.message.chat_id
    state = get_user_data(chat_id)
    idx = state["step"]
    choice = int(query.data.split("_")[1])
    price = STEPS[idx]["options"][choice]["price"]
    state["remaining"] -= price
    state["selections"].append(choice)
    state["step"] += 1
    set_user_data(chat_id, state)

    if state["remaining"] < 0:
        await send_stage_message(
            update,
            "‚ùå –ë—é–¥–∂–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω! –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.",
            header="–û—à–∏–±–∫–∞",
            reply_markup=build_restart_keyboard()
        )
        return

    await show_next_step(update, context)

async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    state = get_user_data(query.message.chat_id)
    total_spent = state["budget"] - state["remaining"]
    optimal = 0
    lines = ["üèÅ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏</b>\n"]
    purpose = state["purpose"]

    # –û—Ç—á—ë—Ç –ø–æ –≤—ã–±–æ—Ä—É
    for i, sel in enumerate(state["selections"]):
        comp = STEPS[i]["component"]
        opt = STEPS[i]["options"][sel]
        best = STEPS[i][f"optimal_{purpose}"]
        mark = "‚úÖ" if sel == best else "‚ùå"
        if sel == best:
            optimal += 1
        lines.append(f"{mark} {comp}: {opt['name']} ‚Äî {opt['price']}¬†‚ÇΩ")

    lines.append(f"\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent}¬†‚ÇΩ –∏–∑ {state['budget']}¬†‚ÇΩ")
    lines.append(f"üèÜ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤: {optimal} –∏–∑ {TOTAL_STEPS}")

    # –ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–∞–Ω–∞–ª–∏–∑
    if optimal == TOTAL_STEPS:
        lines.append("\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Å–±–æ—Ä–∫–∞! –í—ã –∏–¥–µ–∞–ª—å–Ω–æ —É–ª–æ–∂–∏–ª–∏—Å—å –≤ —Ü–µ–ª—å.")
    else:
        lines.append("\nüîé <b>–ì–ª—É–±–æ–∫–∏–π —Ç–µ—Ö–∞–Ω–∞–ª–∏–∑:</b>")
        for i, sel in enumerate(state["selections"]):
            best = STEPS[i][f"optimal_{purpose}"]
            if sel != best:
                wrong_name = STEPS[i]["options"][sel]["name"]
                correct_name = STEPS[i]["options"][best]["name"]
                explanation = STEPS[i]["analysis"][purpose]
                lines.append(f"\n‚Ä¢ <b>{STEPS[i]['component']}</b>: –≤—ã –≤—ã–±—Ä–∞–ª–∏ ¬´{wrong_name}¬ª, –∞ –ª—É—á—à–µ ¬´{correct_name}¬ª.\n  {explanation}")

    await send_stage_message(update, "\n".join(lines), reply_markup=build_restart_keyboard())

async def restart_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    await start_game_mode(update, context)

async def game_go_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query; await query.answer()
    from main import start_main_menu
    await start_main_menu(update, context)

# ======================================
#         –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# ======================================
def setup_handlers(app):
    app.add_handler(CommandHandler("game", start_game_mode))
    app.add_handler(CallbackQueryHandler(start_game_mode,       pattern="^game_mode$"))
    app.add_handler(CallbackQueryHandler(handle_purpose,        pattern="^purpose_"))
    app.add_handler(CallbackQueryHandler(handle_budget,         pattern="^budget_"))
    app.add_handler(CallbackQueryHandler(handle_choice,         pattern="^choice_"))
    app.add_handler(CallbackQueryHandler(restart_game,          pattern="^game_restart$"))
    app.add_handler(CallbackQueryHandler(game_go_home,          pattern="^game_home$"))

# –ê–ª–∏–∞—Å –¥–ª—è main.py
start_game_mode = start_game_mode