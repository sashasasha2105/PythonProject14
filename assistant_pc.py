# assistant_pc.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes
from data import (
    steps,
    cooling_instructions,
    ram_instructions,
    fan_instructions,
    power_supply_instructions,
    gpu_instructions,
    wires_instructions
)
from utils import get_user_data, set_user_data, update_user_step

# –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–ø–æ–≤ —Å–±–æ—Ä–∫–∏ (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
TOTAL_STEPS = 8

def get_progress_text(progress, total=TOTAL_STEPS):
    percent = int((progress / total) * 100)
    filled = "üü¢" * progress
    unfilled = "‚ö™" * (total - progress)
    return f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∫–∏: [{filled}{unfilled}] {percent}%"

def increment_progress(chat_id):
    data = get_user_data(chat_id)
    current = data.get("progress", 0)
    data["progress"] = current + 1
    set_user_data(chat_id, data)

def current_progress_text(chat_id):
    data = get_user_data(chat_id)
    progress = data.get("progress", 0)
    return get_progress_text(progress)

async def send_stage_message(update: Update, text: str, header: str = "", reply_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.
    """
    if header:
        clean_header = header.replace("ü§ñ", "").strip()
        styled_header = f"<b>{clean_header}</b>"
    else:
        styled_header = ""
    final_text = f"{styled_header}\n{text}"
    await update.effective_message.reply_text(final_text, reply_markup=reply_markup, parse_mode='HTML')

# --------------------------------------------------
# –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
# --------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –ü–ö.
    –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ.
    """
    chat_id = update.effective_chat.id
    set_user_data(chat_id, {"progress": 0})
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–∫–∞–¥–µ–º–∏—è –ü–ö ‚Äì –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø–æ—à–∞–≥–æ–≤–æ —Å–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö. "
        "–¢–∞–∫–∂–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–≤–∞ –æ–±—É—á–∞—é—â–∏—Ö —Ä–µ–∂–∏–º–∞ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        "‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –ü–ö ‚Äì –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±–æ—Ä–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å–æ–≤ (–ë–∞–∑–æ–≤—ã–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π) "
        "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –æ–±—É—á–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ‚Äì –æ–±—â–∏–π —Ç–µ—Å—Ç –ø–æ –∑–Ω–∞–Ω–∏—è–º –æ –ü–ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    main_menu_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –ü–ö", callback_data="assistant_pc"),
         InlineKeyboardButton("–û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º", callback_data="educational_mode")]
    ])
    await send_stage_message(update, welcome_text, header="üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard)

# --------------------------------------------------
# –†–µ–∂–∏–º "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –ü–ö"
# --------------------------------------------------
async def assistant_pc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –ü–ö.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ callback_data "assistant_pc".
    """
    query = update.callback_query
    await query.answer()
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç-–±–æ—Ç –ø–æ —Å–±–æ—Ä–∫–µ –≤–∞—à–µ–≥–æ –ü–ö. –£ –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∫–∏?\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ:\n"
        "- –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞\n"
        "- –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä\n"
        "- –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞\n"
        "- –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å\n"
        "- –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å\n"
        "- –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è\n"
        "- –ö–æ—Ä–ø—É—Å\n"
        "- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)\n"
        "- –û—Ç–≤–µ—Ä—Ç–∫–∏\n"
        "- –¢–µ—Ä–º–æ–ø–∞—Å—Ç–∞"
    )
    await send_stage_message(update, text, header="–†–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–Ø –≥–æ—Ç–æ–≤", callback_data="ready"),
                                    InlineKeyboardButton("–ï—â–µ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è", callback_data="not_ready")],
                                   [InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

# --------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# --------------------------------------------------
async def go_home(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–º–æ–π" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é,
    –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –∏ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é (–∫–∞–∫ –≤ main.py).
    """
    query = update.callback_query
    await query.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ó–¥–µ—Å—å –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ start.
    main_menu_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ê–∫–∞–¥–µ–º–∏—è –ü–ö ‚Äì –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –ø–æ—à–∞–≥–æ–≤–æ —Å–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö. "
        "–¢–∞–∫–∂–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–≤–∞ –æ–±—É—á–∞—é—â–∏—Ö —Ä–µ–∂–∏–º–∞ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n"
        "‚Ä¢ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –ü–ö ‚Äì –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–±–æ—Ä–∫–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.\n"
        "‚Ä¢ –û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º ‚Äì –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –æ–±—É—á–∞—é—â–∏—Ö –∫—É—Ä—Å–æ–≤ (–ë–∞–∑–æ–≤—ã–π, –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π) "
        "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –æ–±—É—á–∞—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ‚Äì –æ–±—â–∏–π —Ç–µ—Å—Ç –ø–æ –∑–Ω–∞–Ω–∏—è–º –æ –ü–ö.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
    )
    main_menu_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–±–æ—Ä–∫–∏ –ü–ö", callback_data="assistant_pc"),
         InlineKeyboardButton("–û–±—É—á–∞—é—â–∏–π —Ä–µ–∂–∏–º", callback_data="educational_mode")]
    ])
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=main_menu_text,
        reply_markup=main_menu_keyboard,
        parse_mode='HTML'
    )

# --------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–±–æ—Ä–∫–µ
# --------------------------------------------------
async def handle_preparation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if query.data == "ready":
        text = (
            "–†–∞–∑–ª–æ–∂–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –Ω–∞ —Ä–æ–≤–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ—Ä–Ω–æ–π –∏ –Ω–µ–ø—Ä–æ–≤–æ–¥—è—â–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n\n"
            "–†–∞—Å–ø–æ–ª–æ–∂–∏—Ç–µ –∏—Ö —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–∏ –ª–µ–≥–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
            "- –ö–æ—Ä–ø—É—Å\n"
            "- –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞\n"
            "- –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä, –∫—É–ª–µ—Ä –∏ –û–ó–£\n"
            "- –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, SSD/HDD\n"
            "- –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è"
        )
        await query.edit_message_text(text)
        increment_progress(query.message.chat_id)
        progress_text = current_progress_text(query.message.chat_id)
        await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                                   header="üõ†Ô∏è –≠—Ç–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏",
                                   reply_markup=InlineKeyboardMarkup([
                                       [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_start"),
                                        InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step"),
                                        InlineKeyboardButton("üè†", callback_data="go_home")]
                                   ]))
    else:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É –ø–æ–∑–∂–µ.")

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await assistant_pc(update, context)

# --------------------------------------------------
# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞)
# --------------------------------------------------
async def process_next_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:",
                               header="üíª –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("Intel", callback_data="Intel"),
                                    InlineKeyboardButton("AMD", callback_data="AMD")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_preparation"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_preparation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_preparation_choice(update, context)

# --------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
# --------------------------------------------------
async def process_platform_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    platform = query.data
    data = get_user_data(query.message.chat_id)
    if "progress" not in data:
        data["progress"] = 0
    data["platform"] = platform
    data["step_index"] = 0
    set_user_data(query.message.chat_id, data)
    await show_step(update, context)

# --------------------------------------------------
# –®–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
# --------------------------------------------------
async def show_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_info = get_user_data(query.message.chat_id)
    if user_info:
        platform = user_info["platform"]
        step_index = user_info["step_index"]
        instructions_list = steps.get(platform, {}).get("instructions", [])
        if step_index < len(instructions_list):
            step_text = instructions_list[step_index]
            await send_stage_message(update, step_text, header="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
            user_info["step_index"] += 1
            update_user_step(query.message.chat_id, "step_index", user_info["step_index"])
            increment_progress(query.message.chat_id)
            progress_text = current_progress_text(query.message.chat_id)
            await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è.",
                                       header="‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
                                       reply_markup=InlineKeyboardMarkup([
                                           [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_platform"),
                                            InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_cooling"),
                                            InlineKeyboardButton("üè†", callback_data="go_home")]
                                       ]))

async def back_to_platform(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await process_next_step(update, context)

# --------------------------------------------------
# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
# --------------------------------------------------
async def handle_cooling_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:\n–ö–∞–∫–æ–π —Ç–∏–ø –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —É –≤–∞—Å?",
                               header="‚ùÑÔ∏è –í—ã–±–æ—Ä —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–í–æ–∑–¥—É—à–Ω–æ–µ", callback_data="air"),
                                    InlineKeyboardButton("–í–æ–¥—è–Ω–æ–µ", callback_data="water")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_platform"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_cooling_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_info = get_user_data(query.message.chat_id)
    platform = user_info.get("platform", "Intel")
    cooling_type = query.data
    user_info["cooling"] = cooling_type
    set_user_data(query.message.chat_id, user_info)
    instructions = cooling_instructions.get(platform, {}).get(cooling_type, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await send_stage_message(update, instructions, header="‚ùÑÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.",
                               header="‚ùÑÔ∏è –°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_cooling"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_ram"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_cooling(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_cooling_choice(update, context)

# --------------------------------------------------
# –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
# --------------------------------------------------
async def handle_ram_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–æ–∫ –û–ó–£ —É –≤–∞—Å?",
                               header="üíæ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("1 –ø–ª–∞–Ω–∫–∞", callback_data="1"),
                                    InlineKeyboardButton("2 –ø–ª–∞–Ω–∫–∏", callback_data="2"),
                                    InlineKeyboardButton("4 –ø–ª–∞–Ω–∫–∏", callback_data="4")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_cooling"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_ram_choice_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    ram_choice = query.data
    instruction = ram_instructions.get(ram_choice, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await query.edit_message_text(instruction)
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è.",
                               header="üíæ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_ram"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_m2"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_ram(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_ram_choice(update, context)

# --------------------------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
# --------------------------------------------------
async def handle_m2_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update,
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è:\n"
        "1. –ù–∞–π–¥–∏—Ç–µ —Å–ª–æ—Ç M.2.\n"
        "2. –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å.\n"
        "3. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤–∏–Ω—Ç–æ–º.\n"
        "[–í–∏–¥–µ–æ](https://rutube.ru/video/fa86b5395ed102e415eb00d8a3b2f9fd/)",
        header="üóúÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ M.2"
    )
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤.",
                               header="üóúÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ M.2",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_m2"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_fans"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_m2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_m2_choice(update, context)

# --------------------------------------------------
# –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤
# --------------------------------------------------
async def handle_fan_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤ –≤ –∫–æ—Ä–ø—É—Å. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä–ø—É—Å–∞:",
                               header="üåÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–π —Ç–∏–ø", callback_data="aquarium"),
                                    InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∏–ø (–Ω–∏–∂–Ω–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ë–ü)", callback_data="classic_bottom")],
                                   [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∏–ø (–≤–µ—Ä—Ö–Ω–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ë–ü)", callback_data="classic_top"),
                                    InlineKeyboardButton("–£ –º–µ–Ω—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", callback_data="already_installed")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_m2"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_fan_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    instruction = fan_instructions.get(query.data, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await query.edit_message_text(instruction)
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è.",
                               header="üåÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_fans"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_power_supply"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_fans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_fan_choice(update, context)

# --------------------------------------------------
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
# --------------------------------------------------
async def handle_power_supply_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, power_supply_instructions,
                               header="üîå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è")
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                               header="üîå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_fans"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_gpu_check"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_power(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_fan_instructions(update, context)

# --------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
# --------------------------------------------------
async def ask_gpu_presence(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞?",
                               header="üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–î–∞", callback_data="gpu_yes"),
                                    InlineKeyboardButton("–ù–µ—Ç", callback_data="gpu_no")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_power"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_gpu_yes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, gpu_instructions, header="üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞")
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©' –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–æ–≤ –ü–ö.",
                               header="üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_gpu"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_wires"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_gpu_no(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    increment_progress(query.message.chat_id)
    progress_text = current_progress_text(query.message.chat_id)
    await send_stage_message(update, f"{progress_text}\n\n–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª—å—à–µ‚è©' –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–æ–≤ –ü–ö.",
                               header="üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_gpu"),
                                    InlineKeyboardButton("–î–∞–ª—å—à–µ‚è©", callback_data="next_step_wires"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_gpu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_power_supply_choice(update, context)

# --------------------------------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤ –ü–ö
# --------------------------------------------------
async def handle_wires_instruction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, wires_instructions, header="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤")
    await send_stage_message(update, "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –ø–æ–º–æ—â—å –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°?",
                               header="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–î–∞", callback_data="os_yes"),
                                    InlineKeyboardButton("–ù–µ—Ç", callback_data="os_no")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_wires"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_wires(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_wires_instruction(update, context)

# --------------------------------------------------
# –í—ã–±–æ—Ä –ø–æ–º–æ—â–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°
# --------------------------------------------------
async def handle_os_help_yes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:",
                               header="üíø –ü–æ–º–æ—â—å –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("Windows", callback_data="os_windows"),
                                    InlineKeyboardButton("Linux", callback_data="os_linux"),
                                    InlineKeyboardButton("Mac OS", callback_data="os_mac")],
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_wires"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_os_help_no(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update, "–•–æ—Ä–æ—à–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–±–æ—Ä–∫–∏.",
                               header="üíø –ü–æ–º–æ—â—å –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_wires"),
                                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="finish_assembly"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def back_to_os(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await handle_os_help_yes(update, context)

# --------------------------------------------------
# –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°
# --------------------------------------------------
async def handle_os_windows(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update,
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ **Windows**:\n\n"
        "1. **–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞:** –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç Microsoft:\n"
        "   https://www.microsoft.com/software-download/windows\n"
        "   –∏ —Å–∫–∞—á–∞–π—Ç–µ ISO-–æ–±—Ä–∞–∑.\n"
        "2. **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π —Ñ–ª–µ—à–∫–∏:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Rufus –∏–ª–∏ Media Creation Tool.\n"
        "3. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BIOS/UEFI:** –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª—é—á–∏—Ç–µ UEFI Boot.\n"
        "4. **–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** –∑–∞–≥—Ä—É–∑–∏—Ç–µ—Å—å —Å —Ñ–ª–µ—à–∫–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "https://support.microsoft.com/en-us/windows",
        header="üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows"
    )
    await send_stage_message(update, "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
                               header="üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_os"),
                                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="finish_assembly"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_os_linux(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update,
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ **Linux**:\n\n"
        "1. **–í—ã–±–æ—Ä –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞:** –Ω–∞–ø—Ä–∏–º–µ—Ä, Ubuntu, Fedora, Debian –∏ —Ç.–¥.\n"
        "2. **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ISO:** —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://ubuntu.com/ –¥–ª—è Ubuntu).\n"
        "3. **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π —Ñ–ª–µ—à–∫–∏:** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ balenaEtcher –∏–ª–∏ Rufus.\n"
        "4. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BIOS/UEFI:** –≤–∫–ª—é—á–∏—Ç–µ UEFI –∏–ª–∏ Legacy Boot (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞).\n"
        "5. **–ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** –∑–∞–≥—Ä—É–∑–∏—Ç–µ—Å—å —Å —Ñ–ª–µ—à–∫–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n"
        "‚Ä¢ Ubuntu Docs: https://ubuntu.com/tutorials\n"
        "‚Ä¢ Fedora Docs: https://docs.fedoraproject.org/\n"
        "‚Ä¢ Debian Handbook: https://www.debian.org/doc/",
        header="üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Linux"
    )
    await send_stage_message(update, "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
                               header="üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Linux",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_os"),
                                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="finish_assembly"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

async def handle_os_mac(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update,
        "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ **Mac OS**:\n\n"
        "1. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é.\n"
        "2. **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ:** –µ—Å–ª–∏ —ç—Ç–æ Mac, —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ App Store. –î–ª—è Hackintosh ‚Äì –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–±–æ—Ä–∫–∏.\n"
        "3. **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–π —Ñ–ª–µ—à–∫–∏ (–¥–ª—è Hackintosh):** –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ UniBeast –∏–ª–∏ OpenCore.\n"
        "4. **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ BIOS/UEFI:** –æ—Ç–∫–ª—é—á–∏—Ç–µ Secure Boot, –≤–∫–ª—é—á–∏—Ç–µ AHCI –∏ —Ç.–¥.\n"
        "5. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞:** –∑–∞–≥—Ä—É–∑–∏—Ç–µ—Å—å —Å —Ñ–ª–µ—à–∫–∏ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞.\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n"
        "‚Ä¢ Apple Support: https://support.apple.com/boot-camp\n"
        "‚Ä¢ Hackintosh Guides: https://dortania.github.io/",
        header="üçé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mac OS"
    )
    await send_stage_message(update, "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
                               header="üçé –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Mac OS",
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–ù–∞–∑–∞–¥‚è™", callback_data="back_to_os"),
                                    InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É", callback_data="finish_assembly"),
                                    InlineKeyboardButton("üè†", callback_data="go_home")]
                               ]))

# --------------------------------------------------
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
# --------------------------------------------------
async def finish_assembly(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await send_stage_message(update,
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –ü–ö!",
        header="üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", callback_data="go_home")]
        ])
    )

# --------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏ –ü–ö
# --------------------------------------------------
def setup_handlers(app):
    app.add_handler(CallbackQueryHandler(assistant_pc, pattern="^assistant_pc$"))
    app.add_handler(CallbackQueryHandler(go_home, pattern="^go_home$"))
    app.add_handler(CallbackQueryHandler(handle_preparation_choice, pattern="^(ready|not_ready)$"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
    app.add_handler(CallbackQueryHandler(process_next_step, pattern="^next_step$"))
    app.add_handler(CallbackQueryHandler(back_to_preparation, pattern="^back_to_preparation$"))
    app.add_handler(CallbackQueryHandler(process_platform_choice, pattern="^(Intel|AMD)$"))
    app.add_handler(CallbackQueryHandler(back_to_platform, pattern="^back_to_platform$"))
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(handle_cooling_choice, pattern="^next_step_cooling$"))
    app.add_handler(CallbackQueryHandler(back_to_cooling, pattern="^back_to_cooling$"))
    app.add_handler(CallbackQueryHandler(handle_cooling_selection, pattern="^(air|water)$"))
    # –í—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
    app.add_handler(CallbackQueryHandler(handle_ram_choice, pattern="^next_step_ram$"))
    app.add_handler(CallbackQueryHandler(handle_ram_choice_selection, pattern="^(1|2|4)$"))
    app.add_handler(CallbackQueryHandler(back_to_ram, pattern="^back_to_ram$"))
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
    app.add_handler(CallbackQueryHandler(handle_m2_choice, pattern="^next_step_m2$"))
    app.add_handler(CallbackQueryHandler(back_to_m2, pattern="^back_to_m2$"))
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä–æ–≤
    app.add_handler(CallbackQueryHandler(handle_fan_choice, pattern="^next_step_fans$"))
    app.add_handler(CallbackQueryHandler(back_to_fans, pattern="^back_to_fans$"))
    app.add_handler(CallbackQueryHandler(handle_fan_instructions, pattern="^(aquarium|classic_bottom|classic_top|already_installed)$"))
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(handle_power_supply_choice, pattern="^next_step_power_supply$"))
    app.add_handler(CallbackQueryHandler(back_to_power, pattern="^back_to_power$"))
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
    app.add_handler(CallbackQueryHandler(ask_gpu_presence, pattern="^next_step_gpu_check$"))
    app.add_handler(CallbackQueryHandler(handle_gpu_yes, pattern="^gpu_yes$"))
    app.add_handler(CallbackQueryHandler(handle_gpu_no, pattern="^gpu_no$"))
    app.add_handler(CallbackQueryHandler(back_to_gpu, pattern="^back_to_gpu$"))
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤ –ü–ö
    app.add_handler(CallbackQueryHandler(handle_wires_instruction, pattern="^next_step_wires$"))
    app.add_handler(CallbackQueryHandler(back_to_wires, pattern="^back_to_wires$"))
    # –ü–æ–º–æ—â—å –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°
    app.add_handler(CallbackQueryHandler(handle_os_help_yes, pattern="^os_yes$"))
    app.add_handler(CallbackQueryHandler(handle_os_help_no, pattern="^os_no$"))
    app.add_handler(CallbackQueryHandler(back_to_os, pattern="^back_to_os$"))
    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –û–°
    app.add_handler(CallbackQueryHandler(handle_os_windows, pattern="^os_windows$"))
    app.add_handler(CallbackQueryHandler(handle_os_linux, pattern="^os_linux$"))
    app.add_handler(CallbackQueryHandler(handle_os_mac, pattern="^os_mac$"))
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏
    app.add_handler(CallbackQueryHandler(finish_assembly, pattern="^finish_assembly$"))